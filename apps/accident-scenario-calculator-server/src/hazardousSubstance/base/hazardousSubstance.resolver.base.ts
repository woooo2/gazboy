/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HazardousSubstance } from "./HazardousSubstance";
import { HazardousSubstanceCountArgs } from "./HazardousSubstanceCountArgs";
import { HazardousSubstanceFindManyArgs } from "./HazardousSubstanceFindManyArgs";
import { HazardousSubstanceFindUniqueArgs } from "./HazardousSubstanceFindUniqueArgs";
import { CreateHazardousSubstanceArgs } from "./CreateHazardousSubstanceArgs";
import { UpdateHazardousSubstanceArgs } from "./UpdateHazardousSubstanceArgs";
import { DeleteHazardousSubstanceArgs } from "./DeleteHazardousSubstanceArgs";
import { AccidentScenarioFindManyArgs } from "../../accidentScenario/base/AccidentScenarioFindManyArgs";
import { AccidentScenario } from "../../accidentScenario/base/AccidentScenario";
import { HazardousSubstanceService } from "../hazardousSubstance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HazardousSubstance)
export class HazardousSubstanceResolverBase {
  constructor(
    protected readonly service: HazardousSubstanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "read",
    possession: "any",
  })
  async _hazardousSubstancesMeta(
    @graphql.Args() args: HazardousSubstanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HazardousSubstance])
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "read",
    possession: "any",
  })
  async hazardousSubstances(
    @graphql.Args() args: HazardousSubstanceFindManyArgs
  ): Promise<HazardousSubstance[]> {
    return this.service.hazardousSubstances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HazardousSubstance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "read",
    possession: "own",
  })
  async hazardousSubstance(
    @graphql.Args() args: HazardousSubstanceFindUniqueArgs
  ): Promise<HazardousSubstance | null> {
    const result = await this.service.hazardousSubstance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HazardousSubstance)
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "create",
    possession: "any",
  })
  async createHazardousSubstance(
    @graphql.Args() args: CreateHazardousSubstanceArgs
  ): Promise<HazardousSubstance> {
    return await this.service.createHazardousSubstance({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HazardousSubstance)
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "update",
    possession: "any",
  })
  async updateHazardousSubstance(
    @graphql.Args() args: UpdateHazardousSubstanceArgs
  ): Promise<HazardousSubstance | null> {
    try {
      return await this.service.updateHazardousSubstance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HazardousSubstance)
  @nestAccessControl.UseRoles({
    resource: "HazardousSubstance",
    action: "delete",
    possession: "any",
  })
  async deleteHazardousSubstance(
    @graphql.Args() args: DeleteHazardousSubstanceArgs
  ): Promise<HazardousSubstance | null> {
    try {
      return await this.service.deleteHazardousSubstance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccidentScenario], { name: "accidentScenarios" })
  @nestAccessControl.UseRoles({
    resource: "AccidentScenario",
    action: "read",
    possession: "any",
  })
  async findAccidentScenarios(
    @graphql.Parent() parent: HazardousSubstance,
    @graphql.Args() args: AccidentScenarioFindManyArgs
  ): Promise<AccidentScenario[]> {
    const results = await this.service.findAccidentScenarios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
