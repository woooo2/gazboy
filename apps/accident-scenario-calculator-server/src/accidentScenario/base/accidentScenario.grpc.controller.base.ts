/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AccidentScenarioService } from "../accidentScenario.service";
import { AccidentScenarioCreateInput } from "./AccidentScenarioCreateInput";
import { AccidentScenarioWhereInput } from "./AccidentScenarioWhereInput";
import { AccidentScenarioWhereUniqueInput } from "./AccidentScenarioWhereUniqueInput";
import { AccidentScenarioFindManyArgs } from "./AccidentScenarioFindManyArgs";
import { AccidentScenarioUpdateInput } from "./AccidentScenarioUpdateInput";
import { AccidentScenario } from "./AccidentScenario";

export class AccidentScenarioGrpcControllerBase {
  constructor(protected readonly service: AccidentScenarioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccidentScenario })
  @GrpcMethod("AccidentScenarioService", "createAccidentScenario")
  async createAccidentScenario(
    @common.Body() data: AccidentScenarioCreateInput
  ): Promise<AccidentScenario> {
    return await this.service.createAccidentScenario({
      data: {
        ...data,

        pipeline: data.pipeline
          ? {
              connect: data.pipeline,
            }
          : undefined,

        hazardousSubstance: data.hazardousSubstance
          ? {
              connect: data.hazardousSubstance,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thermalRadiationIntensity: true,
        probabilityDamage: true,

        pipeline: {
          select: {
            id: true,
          },
        },

        hazardousSubstance: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccidentScenario] })
  @ApiNestedQuery(AccidentScenarioFindManyArgs)
  @GrpcMethod("AccidentScenarioService", "accidentScenarios")
  async accidentScenarios(
    @common.Req() request: Request
  ): Promise<AccidentScenario[]> {
    const args = plainToClass(AccidentScenarioFindManyArgs, request.query);
    return this.service.accidentScenarios({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thermalRadiationIntensity: true,
        probabilityDamage: true,

        pipeline: {
          select: {
            id: true,
          },
        },

        hazardousSubstance: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccidentScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AccidentScenarioService", "accidentScenario")
  async accidentScenario(
    @common.Param() params: AccidentScenarioWhereUniqueInput
  ): Promise<AccidentScenario | null> {
    const result = await this.service.accidentScenario({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thermalRadiationIntensity: true,
        probabilityDamage: true,

        pipeline: {
          select: {
            id: true,
          },
        },

        hazardousSubstance: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccidentScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AccidentScenarioService", "updateAccidentScenario")
  async updateAccidentScenario(
    @common.Param() params: AccidentScenarioWhereUniqueInput,
    @common.Body() data: AccidentScenarioUpdateInput
  ): Promise<AccidentScenario | null> {
    try {
      return await this.service.updateAccidentScenario({
        where: params,
        data: {
          ...data,

          pipeline: data.pipeline
            ? {
                connect: data.pipeline,
              }
            : undefined,

          hazardousSubstance: data.hazardousSubstance
            ? {
                connect: data.hazardousSubstance,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          thermalRadiationIntensity: true,
          probabilityDamage: true,

          pipeline: {
            select: {
              id: true,
            },
          },

          hazardousSubstance: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccidentScenario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AccidentScenarioService", "deleteAccidentScenario")
  async deleteAccidentScenario(
    @common.Param() params: AccidentScenarioWhereUniqueInput
  ): Promise<AccidentScenario | null> {
    try {
      return await this.service.deleteAccidentScenario({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          thermalRadiationIntensity: true,
          probabilityDamage: true,

          pipeline: {
            select: {
              id: true,
            },
          },

          hazardousSubstance: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
