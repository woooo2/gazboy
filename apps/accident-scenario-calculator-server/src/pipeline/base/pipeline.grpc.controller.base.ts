/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PipelineService } from "../pipeline.service";
import { PipelineCreateInput } from "./PipelineCreateInput";
import { PipelineWhereInput } from "./PipelineWhereInput";
import { PipelineWhereUniqueInput } from "./PipelineWhereUniqueInput";
import { PipelineFindManyArgs } from "./PipelineFindManyArgs";
import { PipelineUpdateInput } from "./PipelineUpdateInput";
import { Pipeline } from "./Pipeline";
import { AccidentScenarioFindManyArgs } from "../../accidentScenario/base/AccidentScenarioFindManyArgs";
import { AccidentScenario } from "../../accidentScenario/base/AccidentScenario";
import { AccidentScenarioWhereUniqueInput } from "../../accidentScenario/base/AccidentScenarioWhereUniqueInput";

export class PipelineGrpcControllerBase {
  constructor(protected readonly service: PipelineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pipeline })
  @GrpcMethod("PipelineService", "createPipeline")
  async createPipeline(
    @common.Body() data: PipelineCreateInput
  ): Promise<Pipeline> {
    return await this.service.createPipeline({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        diameter: true,
        length: true,
        material: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pipeline] })
  @ApiNestedQuery(PipelineFindManyArgs)
  @GrpcMethod("PipelineService", "pipelines")
  async pipelines(@common.Req() request: Request): Promise<Pipeline[]> {
    const args = plainToClass(PipelineFindManyArgs, request.query);
    return this.service.pipelines({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        diameter: true,
        length: true,
        material: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pipeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PipelineService", "pipeline")
  async pipeline(
    @common.Param() params: PipelineWhereUniqueInput
  ): Promise<Pipeline | null> {
    const result = await this.service.pipeline({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        diameter: true,
        length: true,
        material: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pipeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PipelineService", "updatePipeline")
  async updatePipeline(
    @common.Param() params: PipelineWhereUniqueInput,
    @common.Body() data: PipelineUpdateInput
  ): Promise<Pipeline | null> {
    try {
      return await this.service.updatePipeline({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          diameter: true,
          length: true,
          material: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pipeline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PipelineService", "deletePipeline")
  async deletePipeline(
    @common.Param() params: PipelineWhereUniqueInput
  ): Promise<Pipeline | null> {
    try {
      return await this.service.deletePipeline({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          diameter: true,
          length: true,
          material: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/accidentScenarios")
  @ApiNestedQuery(AccidentScenarioFindManyArgs)
  @GrpcMethod("PipelineService", "findManyAccidentScenarios")
  async findManyAccidentScenarios(
    @common.Req() request: Request,
    @common.Param() params: PipelineWhereUniqueInput
  ): Promise<AccidentScenario[]> {
    const query = plainToClass(AccidentScenarioFindManyArgs, request.query);
    const results = await this.service.findAccidentScenarios(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        thermalRadiationIntensity: true,
        probabilityDamage: true,

        pipeline: {
          select: {
            id: true,
          },
        },

        hazardousSubstance: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accidentScenarios")
  @GrpcMethod("PipelineService", "connectAccidentScenarios")
  async connectAccidentScenarios(
    @common.Param() params: PipelineWhereUniqueInput,
    @common.Body() body: AccidentScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accidentScenarios: {
        connect: body,
      },
    };
    await this.service.updatePipeline({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accidentScenarios")
  @GrpcMethod("PipelineService", "updateAccidentScenarios")
  async updateAccidentScenarios(
    @common.Param() params: PipelineWhereUniqueInput,
    @common.Body() body: AccidentScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accidentScenarios: {
        set: body,
      },
    };
    await this.service.updatePipeline({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accidentScenarios")
  @GrpcMethod("PipelineService", "disconnectAccidentScenarios")
  async disconnectAccidentScenarios(
    @common.Param() params: PipelineWhereUniqueInput,
    @common.Body() body: AccidentScenarioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accidentScenarios: {
        disconnect: body,
      },
    };
    await this.service.updatePipeline({
      where: params,
      data,
      select: { id: true },
    });
  }
}
