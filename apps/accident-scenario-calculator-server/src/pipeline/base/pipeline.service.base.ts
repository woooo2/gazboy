/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Pipeline as PrismaPipeline,
  AccidentScenario as PrismaAccidentScenario,
} from "@prisma/client";

export class PipelineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PipelineCountArgs, "select">): Promise<number> {
    return this.prisma.pipeline.count(args);
  }

  async pipelines(
    args: Prisma.PipelineFindManyArgs
  ): Promise<PrismaPipeline[]> {
    return this.prisma.pipeline.findMany(args);
  }
  async pipeline(
    args: Prisma.PipelineFindUniqueArgs
  ): Promise<PrismaPipeline | null> {
    return this.prisma.pipeline.findUnique(args);
  }
  async createPipeline(
    args: Prisma.PipelineCreateArgs
  ): Promise<PrismaPipeline> {
    return this.prisma.pipeline.create(args);
  }
  async updatePipeline(
    args: Prisma.PipelineUpdateArgs
  ): Promise<PrismaPipeline> {
    return this.prisma.pipeline.update(args);
  }
  async deletePipeline(
    args: Prisma.PipelineDeleteArgs
  ): Promise<PrismaPipeline> {
    return this.prisma.pipeline.delete(args);
  }

  async findAccidentScenarios(
    parentId: string,
    args: Prisma.AccidentScenarioFindManyArgs
  ): Promise<PrismaAccidentScenario[]> {
    return this.prisma.pipeline
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accidentScenarios(args);
  }
}
